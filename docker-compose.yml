version: '3.8'

services:
  # Claims Processing API
  claims-api:
    build: .
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    environment:
      - APP_ENV=development
      - DEBUG=true
      - PG_HOST=postgres
      - PG_PASSWORD=claims_password
      - SQL_HOST=sqlserver
      - SQL_PASSWORD=Claims123!
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
      - sqlserver
    volumes:
      - ./data:/data
      - ./models:/models
    networks:
      - claims-network
    restart: unless-stopped

  # PostgreSQL (Staging Database)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: claims_staging
      POSTGRES_USER: claims_user
      POSTGRES_PASSWORD: claims_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - claims-network
    restart: unless-stopped
    command:
      - postgres
      - -c
      - max_connections=200
      - -c
      - shared_buffers=256MB
      - -c
      - effective_cache_size=1GB
      - -c
      - wal_buffers=16MB
      - -c
      - checkpoint_completion_target=0.9

  # SQL Server (Production Database)
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: Claims123!
      ACCEPT_EULA: Y
      MSSQL_PID: Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - claims-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - claims-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - claims-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - claims-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build: .
    command: celery -A src.processing.tasks worker --loglevel=info --concurrency=4
    environment:
      - APP_ENV=development
      - PG_HOST=postgres
      - PG_PASSWORD=claims_password
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/data
      - ./models:/models
    networks:
      - claims-network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build: .
    command: celery -A src.processing.tasks beat --loglevel=info
    environment:
      - APP_ENV=development
      - PG_HOST=postgres
      - PG_PASSWORD=claims_password
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/data
    networks:
      - claims-network
    restart: unless-stopped

volumes:
  postgres_data:
  sqlserver_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  claims-network:
    driver: bridge