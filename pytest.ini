[tool:pytest]
# Pytest configuration for claims processing system

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers
markers =
    unit: Unit tests that test individual components in isolation
    integration: Integration tests that test component interactions
    performance: Performance tests that validate speed and resource usage
    security: Security and HIPAA compliance tests
    slow: Tests that take longer than 30 seconds to complete
    asyncio: Tests that use async/await
    database: Tests that require database connection
    redis: Tests that require Redis connection

# Test output
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-fail-under=80

# Async configuration
asyncio_mode = auto

# Timeout configuration
timeout = 300
timeout_method = thread

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:testcontainers

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test directories
norecursedirs = 
    .git
    .tox
    dist
    build
    *.egg
    __pycache__
    .cache
    .pytest_cache
    htmlcov

# Minimum Python version
minversion = 3.9

# Test collection
collect_ignore = [
    "setup.py",
    "conftest.py"
]

# Environment variables for testing
env =
    TESTING = true
    DATABASE_URL = postgresql+asyncpg://test:test@localhost:5432/test_claims
    REDIS_URL = redis://localhost:6379/1
    ENCRYPTION_KEY = test-encryption-key-32-characters-long
    JWT_SECRET_KEY = test-jwt-secret-key
    ML_MODEL_PATH = /tmp/test_models
    DEBUG = true